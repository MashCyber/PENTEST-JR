###########################################################
# Backup DB to LocalDir && Copy to S3 | MysqlDump
#################################################
# CONSIDERATIONS:
######################
# 0. Make the Backups from a clone to avoid locking PRODUCTIOVE DB during backup upload period.
# 1. Mount second disk to server, mount secondary mountpoint(/mnt/data) with equivalent DB size
# 2. Upload to S3 from Local Directory (/mnt/data)
#######

#!/usr/bin/bash

sudo cat << EOF
>> Script to Backup && Restore DB data to/from Local Dir/S3 <<

>> [Caution]: Ensure enough storage available on local FS !!
>> Root Storage: $( df -hT | grep -i ext4 | head -4)
>> OS : $( cat /etc/os-release | grep -i PRETTY | awk -F "=" '{print$2}')

>> STEPS:
>> 0. Escalate to Root User
>> 1. Install & Configure AWS CLI & Create credentials -- aws configure
>> 2. DB backup Raw/Zipped to Local Dir && upload to S3 Bucket
>> 3. DB restore Raw/Zipped to Local Dir from S3 Bucket
>> 4. restore dump to mysql
>>    # mysql -u root -p testdb < /local/dir/dump.sql

[+] Starting backups...
EOF

#Install AWS CLI
sudo echo " "
sudo echo "[+] Installing AWS CLI..."
sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
sudo apt install unzip -y
sudo unzip awscliv2.zip
sudo ./aws/install
sudo aws configure

echo "[*] --- Options to Select ---"
echo "[*] --backup || -b --> backup db data to Local -> S3"
echo "[*} --restore || -r --> recover db data to Local <- S3"
read -p "[*] Select option (Backup/Restore): " InitOption

################################################
##-->> Copy DB Dump Files Back to Local Dir
################################################


if [[ $InitOption == "--backup" || $InitOption == "-b" ]]
then
        echo "[+] Enter User Input Options:"
        read -p 'DB_USER: ' DB_USER
        read -p 'DB_PASS: ' DB_PASS
        read -p 'DB_URL: ' DB_URL
        read -p 'DB_PORT: ' DB_PORT
        read -p 'DB_NAME: ' DB_NAME
        read -p 'S3_NAME: ' S3_NAME
        read -p 'S3_REGION: ' S3_REGION

        echo " "
        echo "[+] >> Backup DB To Local --> S3 << "
        echo "[+] -----------EXAMPLE----------"
        echo "[+]  ./db_script.sh <option>"
        echo "[+] ----------------------------"
        echo "[+] ...OPTIONS TO SELECT..."
        echo "[+] --localraw || -lr  --  RAW DB dump to Local Dir(/curr_directory/***)"
        echo "[+] --localzip || -lz  --  ZIP && DB dump to Local Dir(/curr_directory/***)"

        read -p "Option: " Option

        echo "[*] Start Time: $(date)" >> output.log
        echo "[*] ***************************" >> output.log
        read -p "[+]Backup LocalDir:(e.g /mnt/data): " LOCALDIR

        if [[  $Option == "--localraw" || $Option == "-lr" ]]
        then
                #[Faster Recovery from local FileSystem] - Raw DB dump to Local Dir && upload to S3
                sudo mysqldump --no-tablespaces -h $DB_URL -u $DB_USER -P $DB_PORT -p$DB_PASS $DB_NAME >> $LOCALDIR/$DB_NAME-$(date -I)-db_dump.sql && \
                #echo [*] ls -lsah $LOCALDIR >> output.log
                sudo aws s3 cp $LOCALDIR/$DB_NAME-$(date -I)-db_dump.sql s3://$S3_NAME && \
                sudo aws s3 ls s3://$S3_NAME >> output.log

        elif [[  $Option == "--localzip" || $Option == "-lz" ]]
        then
                #[Faster Recovery from local FileSystem] - Zip DB dump to Local Dir && upload to S3
                sudo mysqldump --no-tablespaces -h $DB_URL -u $DB_USER -P $DB_PORT -p$DB_PASS $DB_NAME | gzip >> $LOCALDIR/$DB_NAME-$(date -I)-db_dump.sql.gz && \
                #echo [*] ls -lsah  $LOCALDIR >> output.log
                sudo aws s3 cp $LOCALDIR/$DB_NAME-$(date -I)-db_dump.sql.gz s3://$S3_NAME && \
                sudo aws s3 ls s3://$S3_NAME >> output.log
        else
                echo "[+] ** Wrong OR No options Selected**"
        fi

################################################
##-->> RESTORE DB Dump Files Back to Local Dir
################################################

elif [[ $InitOption == "--restore" || $InitOption == "-r" ]]
then
        echo "[+] Enter User Input Options:"
        read -p 'DB_NAME: ' DB_NAME
        read -p 'S3_NAME: ' S3_NAME
        read -p 'S3_REGION: ' S3_REGION
        read -p "File Store Location:(foramt >> /opt/MYSCRIPT/BACKUPS): " LOCALDIR
        read -p "Date:(format >> YYYY-MM-DD ): " DATE

        echo " "
        echo "[+] >> Restore DB Options <<"
        echo "[+] -----------EXAMPLE----------"
        echo "[+]  ./db_script.sh <option>"
        echo "[+] ----------------------------"
        echo "[+] ...OPTIONS TO SELECT..."
        echo "[+] --copyraw2local || -cr2l -- Copy Raw Dump from S3 to Local Current Dir"
        echo "[+] --copyzip2local || -cz2l -- Copy Zip Dump from S3 to Local Current Dir"


        read -p "Option: " Option

        echo "[*] Start Time: $(date)" >> output.log
        echo "[*] ***************************" >> output.log

        if [[ $Option == "--copyraw2local" || $Option == "-cr2l" ]]
        then
                #[Copy Raw Backups] - From S3 to Local Current Dir
                sudo aws s3 cp s3://$S3_NAME/$DB_NAME-$DATE-db_dump.sql $LOCALDIR && \
                sudo ls -lsah  $LOCALDIR >> output.log

        elif [[ $Option == "--copyzip2local" || $Option == "-cz2l" ]]
        then
                #[Copy Zip Backups] - From S3 to Local Current Dir and Decompress to CWD
                echo [*] ls -lsah $LOCALDIR >> output.log
                sudo aws s3 cp s3://$S3_NAME/$DB_NAME-$DATE-db_dump.sql.gz $LOCALDIR
                # sudo gunzip -dvk $DATE_$DB_NAME-db_dump.sql.gz
                # gunzip -dvk **-**-**-db_dump.sql.gz
        else
                echo "[+] ** Wrong OR No options Selected**"
        fi
else
        echo "[+] ** Wrong OR No options Selected**"
fi
echo "[*] ***************************" >> output.log
echo "[*] End Time: $(date)" >> output.log
